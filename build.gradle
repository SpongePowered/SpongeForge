buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public'
        }
        maven {
            name = 'minecrell-snapshots'
            url = 'http://repo.minecrell.net/snapshots'
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'net.minecrell:VanillaGradle:1.0.1-SNAPSHOT'
        classpath('nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0') {
            exclude module: 'guava'
        }
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
    }
}

// Default tasks
defaultTasks 'licenseFormat', 'build'

// Load SpongeAPI first
evaluationDependsOn ':SpongeAPI'

// Define the projects we want to configure
def vanilla = [project(':Common'), project(':Vanilla')]
def mc = vanilla + project(':Forge')
def implementations = [project(':Vanilla'), project(':Forge')]
def projects = mc + project

// Add Eclipse and IDEA plugin for root project
apply plugin: 'eclipse'
apply plugin: 'idea'

// Set general properties
configure(projects) {
    apply plugin: 'base'

    group = 'org.spongepowered'
    version = '2.0-SNAPSHOT' // TODO: For a unified JAR we also need a unified version (at least for the JAR itself)

    ext {
        buildNumber = project.hasProperty('buildNumber') ? buildNumber : '0'
        ciSystem = project.hasProperty('ciSystem') ? ciSystem : 'unknown'
        commit = project.hasProperty('commit') ? commit : 'unknown'
    }
}

// Configure implementation before loading ForgeGradle plugin
configure(mc) {
    repositories {
        mavenCentral()
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
        maven {
            name = 'sonatype-snapshots'
            url = 'https://oss.sonatype.org/content/repositories/snapshots'
        }
    }

    archivesBaseName = "${rootProject.name.toLowerCase()}-${project.name.toLowerCase()}"

    // Mixins
    ext {
        mixinSrg = new File(project.buildDir, 'tmp/mixins/mixins.srg')
        mixinRefMap = new File(project.buildDir, "tmp/mixins/mixins.${project.name.toLowerCase()}.refmap.json")
    }
}

project(':Common') {
    apply plugin: 'net.minecrell.vanilla.base'
    ext.minecraftPlugin = plugins.getPlugin('net.minecrell.vanilla.base')
}

project(':Vanilla') {
    apply plugin: 'net.minecrell.vanilla'
    ext.minecraftPlugin = plugins.getPlugin('net.minecrell.vanilla')
}

// Configure VanillaGradle
configure(vanilla) {
    minecraft {
        version = '1.8'
    }
}

// Configure ForgeGradle
project(':Forge') {
    apply plugin: 'forge'
    ext.minecraftPlugin = plugins.getPlugin('forge')

    minecraft {
        version = '1.8-11.14.1.1334'
    }
}

configure(mc) {
    // Set mappings version
    minecraft {
        mappings = 'snapshot_20150328'
    }

    // Set Java version
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'

    // Testing dependencies
    dependencies {
        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:1.10.19'
    }

    // Compile options
    compileJava {
        options.compilerArgs += [
                '-Xlint:all',
                '-Xlint:-path',
                '-Xlint:-processing',
                "-AoutSrgFile=${project.mixinSrg.canonicalPath}",
                "-AoutRefMapFile=${project.mixinRefMap.canonicalPath}",
                "-AreobfSrgFile=${project.file('build/srgs/mcp-srg.srg').canonicalPath}"
        ]

        options.deprecation = true
        options.encoding = 'UTF-8'
    }

    // Copy the current srgs to the build dir so the user doesn't have to go hunting for them
    task copySrgs(type: Copy, dependsOn: 'genSrgs') {
        from minecraftPlugin.delayedFile('{SRG_DIR}')

        include '**/*.srg'
        into 'build/srgs'
    }

    setupDecompWorkspace.dependsOn copySrgs
    setupDevWorkspace.dependsOn copySrgs
    compileJava.dependsOn copySrgs

    // Configure reobfuscation for mixins
    reobf.doFirst {
        if (project.mixinSrg.exists()) {
            addExtraSrgFile project.mixinSrg
        }
    }

    // Javadoc settings
    javadoc {
        options.encoding = 'UTF-8'
        options.charSet = 'UTF-8'
        options.jFlags('-Xms256m', '-Xmx512m')
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            // Disable the crazy super-strict doclint tool in Java 8
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    // Set manifest entries
    jar {
        from project.mixinRefMap

        manifest {
            attributes(
                    'Specification-Name': project(':SpongeAPI').name,
                    'Specification-Version': project(':SpongeAPI').version,
                    'Specification-Vendor': project(':SpongeAPI').url,
                    'Implementation-Name': rootProject.name,
                    'Implementation-Version': project.version,
                    'Implementation-Vendor': url,
            )
        }
    }

    // Apply code style plugins
    apply plugin: 'license'
    apply plugin: 'checkstyle'

    dependencies {
        // Add custom checkstyle dependency (fixes a few wrong warnings about imports and @param tags in annotations)
        checkstyle 'org.spongepowered:checkstyle:6.1.1-sponge1'
    }

    // License header formatting
    license {
        ext {
            name = project.name
            organization = project.organization
            url = project.url
            year = project.inceptionYear
        }

        header project(':SpongeAPI').file('HEADER.txt')
        include '**/*.java'

        ignoreFailures false
        strictCheck true

        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    // Checkstyle settings
    checkstyle {
        configFile = project(':SpongeAPI').file('checkstyle.xml')
        configProperties = [
                'name' : project.name,
                'organization' : project.organization,
                'url' : project.url,
                'year' : project.inceptionYear,
                'basedir': rootProject.projectDir,
                'severity': 'warning'
        ]
    }
}

configure(implementations) {
    // Apply shadow plugin
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':Common')
    }

    // Eclipse is too stupid to order the classpath correctly unfortunately...
    // Put Common last
    eclipse {
        classpath {
            file {
                whenMerged { classpath ->
                    def lib = classpath.entries.find { it.path == '/Common' }
                    def others = classpath.entries.findAll { it != lib }
                    classpath.entries = others + lib
                }
            }
        }
    }

    jar {
        classifier = 'release'
    }

    shadowJar {
        classifier = ''

        exclude 'GradleStart**'
        exclude 'net/minecraftforge/**'

        from project.mixinRefMap

        dependencies {
            // Common
            include project(':Common')
            include dependency('org.spongepowered:mixin')

            // SpongeAPI
            include project(':SpongeAPI')

            include dependency('org.slf4j:slf4j-api')
            include dependency('org.apache.logging.log4j:log4j-slf4j-impl')

            include dependency('com.google.inject:guice')
            include dependency('javax.inject:javax.inject')
            include dependency('aopalliance:aopalliance')

            include dependency('com.flowpowered:flow-math')

            include dependency('ninja.leaping.configurate:configurate-core')
            include dependency('ninja.leaping.configurate:configurate-hocon')

            include dependency('com.zaxxer:HikariCP-java6')
            include dependency('org.javassist:javassist')

            include dependency('org.mariadb.jdbc:mariadb-java-client')
            include dependency('com.h2database:h2')
            include dependency('org.xerial:sqlite-jdbc')
        }
    }

    // Run shadowJar on build
    assemble.dependsOn shadowJar

    reobf {
        reobf(shadowJar) { spec ->
            spec.classpath = configurations.compile
        }
    }

    apply plugin: 'maven'

    configurations {
        deployerJars // Maven deployment
    }

    dependencies {
        deployerJars 'org.apache.maven.wagon:wagon-ftp:2.7'
    }

    task deobfJar(type: Jar, dependsOn: [classes, ':SpongeAPI:classes', ':Common:classes']) {
        from project(':SpongeAPI').sourceSets.main.output
        from project(':Common').sourceSets.main.output
        from sourceSets.main.output
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'

        from project(':SpongeAPI').sourceSets.main.allSource
        from project(':Common').sourceSets.main.allSource
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: [javadoc, ':Common:javadoc', ':SpongeAPI:javadoc']) {
        classifier = 'javadoc'

        from project(':SpongeAPI').tasks.javadoc.destinationDir
        from project(':Common').tasks.javadoc.destinationDir
        from javadoc.destinationDir
    }

    artifacts {
        archives deobfJar
        archives sourceJar
        archives javadocJar
    }

    uploadArchives {
        dependsOn reobf
        repositories {
            mavenDeployer {
                //configuration = configurations.deployerJars

                repository(url: "file://localhost/tmp/repo/")

                if (project.hasProperty("chRepo")) {
                    repository(url: project.chRepo) {
                        authentication(userName: project.chUsername, password: project.chPassword)
                    }
                }

                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName

                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'Sponge'
                        url 'http://www.spongepowered.org/'

                        scm {
                            url 'https://github.com/SpongePowered/SpongeAPI'
                            connection 'scm:git:https://github.com/SpongePowered/Sponge.git'
                            developerConnection 'scm:git:git@github.com:SpongePowered/Sponge.git'
                        }

                        issueManagement {
                            system 'youtrack'
                            url 'https://issues.spongepowered.org/'
                        }

                        licenses {
                            license {
                                name 'MIT license'
                                url 'http://opensource.org/licenses/MIT'
                                distribution 'repo'
                            }
                        }
                    }
                }
            }
        }
    }
}

mc.each {
    evaluationDependsOn it.path
}

configure(implementations) {
    // Add common access transformer
    project(':Common').sourceSets.main.resources.files.each {
        if (it.name.endsWith('_at.cfg')) {
            logger.lifecycle("Found AccessTransformer in dependency resources: $it.name")
            tasks.deobfBinJar.addTransformer(it)
            tasks.deobfuscateJar.addTransformer(it)
        }
    }
}

/*task jar(type: Jar) {
    duplicatesStrategy 'exclude'

    implementations.each {
        dependsOn it.tasks.build
        from zipTree(it.tasks.shadowJar.archivePath)
        manifest.from it.tasks.shadowJar.manifest
    }
}

tasks.assemble.dependsOn 'jar'*/

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
