// Gradle plugins
buildscript {
    repositories {
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
    }

    dependencies {
        classpath('net.minecraftforge.gradle:ForgeGradle:2.3+') {
            // The gradle Kotlin plugin depends on Intellij's custom fork
            // of GNU Trove, which it doesn't relocate.
            // Therefore, we need to remove any other version of Trove
            // from the classpath, to ensure that 'gnu.trove.*' always
            // resolves to Intellij's version of Trove at runtime
            // See https://youtrack.jetbrains.com/issue/IDEA-211616
            exclude group: 'trove', module: 'trove'
            exclude group: 'net.sf.trove4j', module: 'trove4j'
        }
        classpath 'gradle.plugin.net.minecrell:licenser:0.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'gradle.plugin.org.spongepowered:spongegradle:0.8.1'
        classpath 'org.spongepowered:mixingradle:0.5-SNAPSHOT'
    }
}

repositories {
    mavenLocal()
}

// ForgeGradle tries to pull in typesafe config 1.2.1,
// which causes issues when running Sponge from Intellij.
// We force Gradle to use 1.3.1, which resolves the issue
configurations.all {
    resolutionStrategy {
        force 'com.typesafe:config:1.3.1'

        // Force McTester to use our local SpongeAPI
        /*dependencySubstitution {
            substitute(module("org.spongepowered:spongeapi")).with(project(":SpongeCommon:SpongeAPI"))
        }*/
    }
}

configurations { testCompile.extendsFrom(forgeGradleMcDeps) }

// On Forge, we use the Forge build number as Minecraft version for ForgeGradle

ext.common = project(":SpongeCommon")
ext.minecraftVersion = common.minecraftVersion + "-" + forgeVersion + '.' + forgeBuild
ext.testmods = project.project('testmods')
ext.implementationId = "spongeforge"

// Apply shared implementation Gradle config
apply from: common.file('gradle/implementation.gradle')

version = "$minecraft.version-$forgeBuild-$implementationVersion"



minecraft {
    coreMod = 'org.spongepowered.mod.SpongeCoremod'
    replace '@expected_certificate_fingerprint@', project.hasProperty('spongeCertificateFingerprint') ? project.property('spongeCertificateFingerprint') : ''
}

sponge.plugin.meta {
    dependencies {
        forge {
            version = forgeVersion + '.' + forgeBuild
        }
    }
}

dependencies {
    runtime testmods
}

compileJava {
    options.compilerArgs += [ "-Atokens=FORGE=$forgeBuild;FML=$forgeBuild" ]
}

if (project.hasProperty('spongeKeyStore')) {
    task signShadowJar(type: SignJar, dependsOn: reobfJar) {
        keyStore = project.spongeKeyStore
        alias = project.spongeKeyStoreAlias
        storePass = project.spongeKeyStorePass
        keyPass = project.spongeKeyStoreKeyPass
        inputFile = shadowJar.archivePath
        outputFile = shadowJar.archivePath
    }

    signShadowJar.dependsOn shadowJar
    build.dependsOn signShadowJar
}

jar {
    exclude 'log4j2.xml' // log4j2 configuration is for the development workspace only

    manifest {
        attributes(
                'Main-Class': 'org.spongepowered.launch.Main',
                'TargetForgeBuild': forgeBuild,
                'TargetForgeVersion': minecraft.forgeVersion,
                'FMLCorePlugin': 'org.spongepowered.mod.SpongeCoremod',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0
        )
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task shadowDevJar(type: ShadowJar) {
    classifier = 'dev-shaded'

    from sourceSets.main.output
    from sourceSets.java6.output

    // Default settings for shadow tasks
    configurations = [project.configurations.runtime]
    manifest.inheritFrom tasks.jar.manifest
    exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

shadowDevJar shadowConfiguration

// Upload shadowDevJar to Maven repository
artifacts {
    archives shadowDevJar
}

allprojects {
    // Re-obfuscate only after creating the shadowDevJar
    tasks.findByName('reobfJar')?.mustRunAfter this.tasks.shadowDevJar
}

tasks.withType(ShadowJar) {
    exclude 'log4j2*.xml' // log4j2 configuration is for the development workspace only

    // Temporarily relocate and shade to avoid confict with forge. TODO: Remove when Forge updates to 1.3.0
    relocate('com.typesafe.config', 'configurate.typesafe.config')

    dependencies {
        exclude project(testmods.path)

        include dependency('com.typesafe:config')

        // This is not available on the client so we need to shade it
        include dependency('com.google.code.findbugs:jsr305')
    }
}

sourceSets.java6.runtimeClasspath += sourceSets.main.runtimeClasspath

reobf {
    jar {
        extraFiles 'extraSrg.srg'
    }
}
mixin {
    extraSrgFile("searge", file('extraSrg.srg'))
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.whenConfigured {
                pom -> pom.dependencies.removeAll { it.groupId == 'org.spongepowered' && it.artifactId == 'testmods' }
            }
        }
    }
}

tasks.withType(JavaCompile) {
   options.incremental = true
}

// Unfortunately, Mixin's annotation processor requires that SpongeCommon
// is compiled, in order for SpongeForge's references to SpongeCommon
// to be resolved by the AP. See https://github.com/SpongePowered/Mixin/issues/320
project(":SpongeCommon").tasks.compileJava.outputs.upToDateWhen { false }

