// Gradle plugins
buildscript {
    repositories {
        maven {
            name = 'gradle-plugins'
            url = 'https://plugins.gradle.org/m2'
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'gradle.plugin.net.minecrell:licenser:0.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'gradle.plugin.org.spongepowered:spongegradle:0.8.1'
        classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
    }
}

// On Forge, we use the Forge build number as Minecraft version for ForgeGradle
ext.minecraftVersion = forgeBuild
ext.testmods = project.project('testmods')

// Apply shared implementation Gradle config
apply from: project(':SpongeCommon').file('gradle/implementation.gradle')

version = "$minecraft.version-$forgeBuild-$apiSuffix-$buildNumber"

minecraft {
    coreMod = 'org.spongepowered.mod.SpongeCoremod'
    replace '@expected_certificate_fingerprint@', project.hasProperty('spongeCertificateFingerprint') ? project.property('spongeCertificateFingerprint') : ''
}

sponge.plugin.meta {
    dependencies {
        forge {
            version = project.minecraft.forgeVersion
        }
    }
}

dependencies {
    runtime testmods
}

compileJava {
    options.compilerArgs += [ "-Atokens=FORGE=$forgeBuild;FML=$forgeBuild" ]
}

if (project.hasProperty('spongeKeyStore')) {
    task signShadowJar(type: SignJar, dependsOn: reobfJar) {
        keyStore = project.spongeKeyStore
        alias = project.spongeKeyStoreAlias
        storePass = project.spongeKeyStorePass
        keyPass = project.spongeKeyStoreKeyPass
        inputFile = shadowJar.archivePath
        outputFile = shadowJar.archivePath
    }

    signShadowJar.dependsOn shadowJar
    build.dependsOn signShadowJar
}

jar {
    exclude 'log4j2.xml' // log4j2 configuration is for the development workspace only

    manifest {
        attributes(
                'Main-Class': 'org.spongepowered.launch.Main',
                'TargetForgeBuild': forgeBuild,
                'TargetForgeVersion': minecraft.forgeVersion,
                'FMLCorePlugin': 'org.spongepowered.mod.SpongeCoremod',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0
        )
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.jengelman.gradle.plugins.shadow.transformers.IncludeResourceTransformer

task shadowDevJar(type: ShadowJar) {
    classifier = 'dev-shaded'

    from sourceSets.main.output
    from sourceSets.java6.output

    // Default settings for shadow tasks
    configurations = [project.configurations.runtime]
    manifest.inheritFrom tasks.jar.manifest
    exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}
shadowJar {
    // find jarinjar configurations in all projects
    // there's only one jar right now (mixin), but this is future-proof
    allprojects
            .collect {it.configurations.findByName("jarinjar")}
            .findAll {it != null}
            .each {jarinjar ->

        // no need to shade these. Exclude them
        jarinjar.dependencies.each {dep ->
            dependencies {
                exclude dependency(dep)
            }
        }

        afterEvaluate {
            jarinjar.each {dep ->
                // this will add the jars to the jar. We can't just use from because
                // shadowJar will automatically unpack any jar that is included.
                transform(IncludeResourceTransformer) {
                    file = dep
                    resource = "META-INF/libraries/$dep.name"
                    // TODO: Add additional meta file with the jar (essentially a second manifest)
                    // FIXME: deps aren't loaded with coremods MinecraftForge#4993
                }
            }
            // Add names of jars
            manifest.attributes 'ContainedDeps': jarinjar.collect {it.name}.join(' ')
        }
    }
}

shadowDevJar shadowConfiguration

// Upload shadowDevJar to Maven repository
artifacts {
    archives shadowDevJar
}

allprojects {
    // Re-obfuscate only after creating the shadowDevJar
    tasks.findByName('reobfJar')?.mustRunAfter this.tasks.shadowDevJar
}

tasks.withType(ShadowJar) {
    exclude 'log4j2*.xml' // log4j2 configuration is for the development workspace only

    // Temporarily relocate and shade to avoid confict with forge. TODO: Remove when Forge updates to 1.3.0
    relocate('com.typesafe.config', 'configurate.typesafe.config')

    dependencies {
        exclude project(testmods.path)

        include dependency('com.typesafe:config')

        // This is not available on the client so we need to shade it
        include dependency('com.google.code.findbugs:jsr305')
    }
}

sourceSets.java6.runtimeClasspath += sourceSets.main.runtimeClasspath

reobf {
    jar {
        extraFiles 'extraSrg.srg'
    }
}

apply from: 'changelog.gradle'
