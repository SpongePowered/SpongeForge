// Gradle plugins
buildscript {
    repositories {
        maven {
            name = 'gradle-plugins'
            url = 'https://plugins.gradle.org/m2'
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
    }


    dependencies {
        classpath('net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT') {
            // The gradle Kotlin plugin depends on Intellij's custom fork
            // of GNU Trove, which it doesn't relocate.
            // Therefore, we need to remove any other version of Trove
            // from the classpath, to ensure that 'gnu.trove.*' always
            // resolves to Intellij's version of Trove at runtime
            // See https://youtrack.jetbrains.com/issue/IDEA-211616
            exclude group: 'trove', module: 'trove'
            exclude group: 'net.sf.trove4j', module: 'trove4j'
        }
        classpath 'gradle.plugin.net.minecrell:licenser:0.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'gradle.plugin.org.spongepowered:spongegradle:0.8.1'
        classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
        classpath mcTesterDep
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.30'
}

// ForgeGradle tries to pull in typesafe config 1.2.1,
// which causes issues when running Sponge from Intellij.
// We force Gradle to use 1.3.1, which resolves the issue
configurations.all {
    resolutionStrategy {
        force 'com.typesafe:config:1.3.1'

        // Force McTester to use our local SpongeAPI
        /*dependencySubstitution {
            substitute(module("org.spongepowered:spongeapi")).with(project(":SpongeCommon:SpongeAPI"))
        }*/
    }
}

configurations { testCompile.extendsFrom(forgeGradleMcDeps) }

// On Forge, we use the Forge build number as Minecraft version for ForgeGradle

ext.minecraftVersion = forgeVersion + '.' + forgeBuild
ext.testmods = project.project('testmods')
ext.implementationId = "spongeforge"

// Apply shared implementation Gradle config
apply from: project(':SpongeCommon').file('gradle/implementation.gradle')

version = "$minecraft.version-$forgeBuild-$implementationVersion"
apply plugin: 'org.spongepowered.mctester'



minecraft {
    coreMod = 'org.spongepowered.mod.SpongeCoremod'
    replace '@expected_certificate_fingerprint@', project.hasProperty('spongeCertificateFingerprint') ? project.property('spongeCertificateFingerprint') : ''
}

sponge.plugin.meta {
    dependencies {
        forge {
            version = forgeVersion + '.' + forgeBuild
        }
    }
}

dependencies {
    runtime testmods
}

test {
    systemProperty "org.lwjgl.util.Debug", "true"
}

compileJava {
    options.compilerArgs += [ "-Atokens=FORGE=$forgeBuild;FML=$forgeBuild" ]
}

if (project.hasProperty('spongeKeyStore')) {
    task signShadowJar(type: SignJar, dependsOn: reobfJar) {
        keyStore = project.spongeKeyStore
        alias = project.spongeKeyStoreAlias
        storePass = project.spongeKeyStorePass
        keyPass = project.spongeKeyStoreKeyPass
        inputFile = shadowJar.archivePath
        outputFile = shadowJar.archivePath
    }

    signShadowJar.dependsOn shadowJar
    build.dependsOn signShadowJar
}

jar {
    exclude 'log4j2.xml' // log4j2 configuration is for the development workspace only

    manifest {
        attributes(
                'Main-Class': 'org.spongepowered.launch.Main',
                'TargetForgeBuild': forgeBuild,
                'TargetForgeVersion': minecraft.forgeVersion,
                'FMLCorePlugin': 'org.spongepowered.mod.SpongeCoremod',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0
        )
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task shadowDevJar(type: ShadowJar) {
    classifier = 'dev-shaded'

    from sourceSets.main.output
    from sourceSets.java6.output

    // Default settings for shadow tasks
    configurations = [project.configurations.runtime]
    manifest.inheritFrom tasks.jar.manifest
    exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

shadowDevJar shadowConfiguration

// Upload shadowDevJar to Maven repository
artifacts {
    archives shadowDevJar
}

allprojects {
    // Re-obfuscate only after creating the shadowDevJar
    tasks.findByName('reobfJar')?.mustRunAfter this.tasks.shadowDevJar
}

tasks.withType(ShadowJar) {
    exclude 'log4j2*.xml' // log4j2 configuration is for the development workspace only

    // Temporarily relocate and shade to avoid confict with forge. TODO: Remove when Forge updates to 1.3.0
    relocate('com.typesafe.config', 'configurate.typesafe.config')

    dependencies {
        exclude project(testmods.path)

        include dependency('com.typesafe:config')

        // This is not available on the client so we need to shade it
        include dependency('com.google.code.findbugs:jsr305')
    }
}

sourceSets.java6.runtimeClasspath += sourceSets.main.runtimeClasspath

reobf {
    jar {
        extraFiles 'extraSrg.srg'
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.whenConfigured {
                pom -> pom.dependencies.removeAll { it.groupId == 'org.spongepowered' && it.artifactId == 'testmods' }
            }
        }
    }
}

apply from: 'changelog.gradle'

dependencies {
    testCompile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testCompile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.23.4"
    testCompile "org.jetbrains.kotlin:kotlin-reflect:1.3.0"
    testCompile "org.apache.logging.log4j:log4j-core:2.8.1"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

license.include '**/*.kt'

// Based on https://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing/

def newFiles = (tasks.shadowDevJar.outputs.files + ((sourceSets.test.compileClasspath - tasks.jar.outputs.files))).minus(project(":SpongeCommon").tasks.jar.outputs.files)

sourceSets {
    integrationTest {
        java {
            // This is a terrible hack to get McTester to work in development
            // We want to include the following:
            // * Dependencies from the 'test' sourceset
            // * Deobfuscated (dev jar) classes
            //
            // We do NOT want to include:
            // * Reobfuscated classess
            //
            // To that end, we explicitly include the output of 'shadowDevJar' and 'test.compileClasspath',
            // while exlucding the outputs of the SpongeCommon and SpongeForge regular (obfuscated) jars

            // Eventually, this should no longer be necessary once McTester supports obfuscated Sponge jars
            // For the time being, we're stuck with this

            compileClasspath += tasks.shadowDevJar.outputs.files + sourceSets.test.compileClasspath
            runtimeClasspath += tasks.shadowDevJar.outputs.files + sourceSets.test.compileClasspath
            //compileClasspath += newFiles
            //runtimeClasspath += newFiles

            srcDirs += file('src/integration-test/java')
        }
        kotlin {

            srcDirs += file('src/integration-test/kotlin')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

dependencies {
    integrationTestCompile common.sourceSets.test.output
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets.integrationTest.compileClasspath -= (tasks.jar.outputs.files + project(":SpongeCommon").tasks.jar.outputs.files)
sourceSets.integrationTest.runtimeClasspath -= (tasks.jar.outputs.files + project(":SpongeCommon").tasks.jar.outputs.files)


task runMcTester(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}


compileIntegrationTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

tasks.withType(JavaCompile) {
   options.incremental = false
}

// Unfortunately, Mixin's annotation processor requires that SpongeCommon
// is compiled, in order for SpongeForge's references to SpongeCommon
// to be resolved by the AP. See https://github.com/SpongePowered/Mixin/issues/320
project(":SpongeCommon").tasks.compileJava.outputs.upToDateWhen { false }

