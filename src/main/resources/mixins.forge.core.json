{
    "required": true,
    "minVersion": "0.7.2",
    "package": "org.spongepowered.mod.mixin.core",
    "refmap": "mixins.forge.refmap.json",
    "priority": 1111,
    "target": "@env(DEFAULT)",
    "compatibilityLevel": "JAVA_8",
    "mixins": [
        "api.event.MixinAbstractEvent",
        "block.MixinBlock",
        "block.MixinBlockFire",
        "block.MixinBlockLeaves",
        "block.MixinBlockLog",
        "block.MixinBlockOldLeaf",
        "block.MixinBlockRailBase",
        "command.MixinEntitySelector",
        "common.MixinSpongeCommonEventFactory",
        "common.MixinSpongeImplHooks",
        "common.MixinSpongeProxyBlockAccess",
        "common.fluid.MixinSpongeFluidStackBuilder",
        "common.world.MixinWorldManager",
        "entity.MixinEntity",
        "entity.ai.MixinEntityAIBase",
        "entity.item.MixinEntityItem",
        "entity.living.MixinEntityLivingBase",
        "entity.player.MixinEntityPlayer",
        "entity.player.MixinEntityPlayerMP",
        "entity.vehicle.MixinEntityMinecart",
        "event.state.MixinEventConstruction",
        "event.state.MixinEventInit",
        "event.state.MixinEventLoadComplete",
        "event.state.MixinEventPreInit",
        "event.state.MixinEventPostInit",
        "event.state.MixinEventServerAboutToStart",
        "event.state.MixinEventServerStarting",
        "event.state.MixinEventServerStarted",
        "event.state.MixinEventServerStopping",
        "event.state.MixinEventServerStopped",
        "event.state.MixinEventState",
        "fml.common.eventhandler.MixinEventBus",
        "fml.common.gameevent.MixinPlayerEvent",
        "fml.common.gameevent.MixinWorldTickEvent",
        "fml.common.network.handshake.MixinFMLHandshakeMessageRegistryData",
        "fml.common.registry.MixinEntityRegistry",
        "fml.common.registry.MixinBlockDummyAir",
        "fml.common.registry.MixinNetworkRegistry",
        "fml.common.registry.MixinVillagerCareer",
        "fml.common.registry.MixinVillagerProfession",
        "fml.common.registry.MixinVillagerRegistry",
        "forge.MixinBlockSnapshot",
        "forge.MixinDimensionManager",
        "forge.MixinForgeInternalHandler",
        "forge.MixinVanillaInventoryCodeHooks",
        "forge.common.MixinForgeChunkManager$Ticket",
        "forge.common.MixinForgeHooks",
        "forge.event.MixinForgeEventFactory",
        "forge.fluids.MixinFluid",
        "forge.fluids.MixinFluidRegistry",
        "forge.fluids.MixinFluidStack",
        "item.MixinEnchantment",
        "item.MixinItem",
        "item.MixinItemShears",
        "item.MixinItemStack",
        "item.MixinItemLilyPad",
        "item.inventory.MixinInvWrapper",
        "item.inventory.MixinItemStackHandler",
        "item.inventory.MixinSlotItemHandler",
        "item.recipe.MixinSpongeRecipe",
        "item.recipe.MixiSpongeCraftingRecipeRegistry",
        "nbt.MixinNBTTagCompound",
        "network.packet.MixinCPacketClickWindow",
        "network.packet.MixinCPacketPlayerTryUseItemOnBlock",
        "network.MixinNetHandlerPlayServer",
        "server.MixinMinecraftServer",
        "server.MixinPlayerList",
        "server.MixinServerCommandManager",
        "server.management.MixinPlayerChunkMapEntry",
        "server.management.MixinPlayerInteractionManager",
        "world.MixinChunk",
        "world.MixinDimensionType",
        "world.MixinWorld",
        "world.MixinWorldServer",
        "world.MixinWorldProvider",
        "world.biome.MixinBiomeDecorator",
        "world.biome.MixinBiomeGenBaseForge",
        "world.gen.MixinChunkProviderEnd",
        "world.gen.MixinChunkProviderServer",
        "world.gen.feature.MixinWorldGeneratorForge",
        "world.storage.MixinSaveHandler"
    ],
    "client": [
        "client.MixinMinecraft",
        "client.gui.MixinGuiOverlayDebug",
        "client.multiplayer.MixinChunkProviderClient",
        "client.network.MixinNetHandlerPlayClient",
        "client.server.MixinIntegratedServer",
        "server.MixinIntegratedServerAnonInner3"
    ],
    "server": [
        "network.packet.MixinC00Handshake"
    ],
    "injectors": {
        "defaultRequire": 1
    },
    "overwrites": {
        "conformVisibility": true
    }
}
